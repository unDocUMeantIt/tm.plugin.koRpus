% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/read_corpus.R
\name{read_corpus}
\alias{read_corpus}
\title{Convenience wrapper for simpleCorpus, sourcesCorpus and topicCorpus}
\usage{
read_corpus(dir, sources = "", topics = "",
  mc.cores = getOption("mc.cores", 1L), ...)
}
\arguments{
\item{dir}{A charcter string with the path to the root directory of the text corpus. Below this path,
      texts
must be ordered into subfolders named exactly like defined by \code{topics} and \code{sources}. If both
\code{topics} and \code{sources} have exactly one value,
      \code{simpleCorpus} will be called to parse all text files
below \code{dir}.}

\item{sources}{An optional named character vector defining all sources to regard. If more than one value is provided,
the names of each entry must match the names of subdirectories below \code{dir},
      depending on the value of \code{topics}:
If \code{topics} has only one value,
      names of \code{sources} must directly match subdirectories of \code{dir} and \code{sourcesCorpus}
will be called; if \code{topics} has more values,
      names must match subdirectories of \code{dir/<topic>}
and \code{topicCorpus} will be called instead. If only one value is provided,
      its name will be ignored and can be omitted.}

\item{topics}{An optional charcter vector naming the different topics the corpus is divided into. If more than one value is provided,
they must match the subfolders of \code{dir},
      and you must also provide at least one valid value for \code{sources}.}

\item{mc.cores}{The number of cores to use for parallelization,
      see \code{\link[parallel:mclapply]{mclapply}}.}

\item{...}{Additional options, passed through to \code{simpleCorpus},
      \code{sourcesCorpus}, or \code{topicCorpus}
respectively.}
}
\value{
Either an object of class \code{\link[tm.plugin.koRpus:kRp.corpus-class]{kRp.corpus}},
   \code{\link[tm.plugin.koRpus:kRp.sourcesCorpus-class]{kRp.sourcesCorpus}}, or
   \code{\link[tm.plugin.koRpus:kRp.topicCorpus-class]{kRp.topicCorpus}},
      depending on the input.
}
\description{
This wrapper function simplifies the use of the three main corpus parsers in this package,
\code{\link[tm.plugin.koRpus:simpleCorpus]{simpleCorpus}},
\code{\link[tm.plugin.koRpus:sourcesCorpus]{sourcesCorpus}}, and
\code{\link[tm.plugin.koRpus:topicCorpus]{topicCorpus}}.
Depending on the amount and structure of the data given, it will invoke one of those
main functions.
}
\details{
The wrapper explicitly doesn't support all features of the single functions. The main
restriction is that the \code{type} argument is not available,
      instead  \code{type="file"} is
always assumed. That is, it is not possible to supply the corpus content directly as
character vectors.

When the parameter docs explain that element names or values must match certain subdirectories,
      it
means that directories of those names must be present. The directory can have additional subdirectories
or files, they will simply be ignored.
}
\examples{
\dontrun{
# invoking simpleCorpus()
myCorpus <- read_corpus(
  dir="~/data/foo",
  source="The Bar Magazine",
  topic="short stories"
)

# invoking sourcesCorpus()
mySourceCorpus <- read_corpus(
  dir="~/data/foo",
  sources=c(
    bar="The Bar Magazine",
    baz="BAZ Monthly"
  )
)

# invoking topicCorpus()
myTopicCorpus <- read_corpus(
  dir="~/data/foo",
  sources=c(
    bar="The Bar Magazine",
    baz="BAZ Monthly"
  ),
  topics=c("lottery","waste")
)
}
}
