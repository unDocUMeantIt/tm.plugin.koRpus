% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/simpleCorpus.R
\name{simpleCorpus}
\alias{simpleCorpus}
\title{Function to create kRp.corpus objects from directory or object content}
\usage{
simpleCorpus(dir = ".", lang = "kRp.env", tagger = "kRp.env",
  encoding = "", pattern = NULL, recursive = FALSE, ignore.case = FALSE,
  mode = "text", source = "", topic = "", format = "file",
  mc.cores = getOption("mc.cores", 1L), ...)
}
\arguments{
\item{dir}{Character vector with path names to search for text files,
      or the actual texts to be analyzed if \code{format="obj"}.
See \code{\link[tm:DirSource]{DirSource}} and \code{\link[tm:VectorSource]{VectorSource}} for details.}

\item{lang}{A character string naming the language of the analyzed corpus. See \code{\link[koRpus:kRp.POS.tags]{kRp.POS.tags}} for all supported languages.
If set to \code{"kRp.env"} this is got from \code{\link[koRpus:get.kRp.env]{get.kRp.env}}. This information will also be passed to
the \code{readerControl} list of the \code{VCorpus} call.}

\item{tagger}{A character string pointing to the tokenizer/tagger command you want to use for basic text analysis. Defaults to \code{tagger="kRp.env"} to get the settings by
\code{\link[koRpus:get.kRp.env]{get.kRp.env}}. Set to \code{"tokenize"} to use \code{\link[koRpus:tokenize]{tokenize}}.}

\item{encoding}{Character string describing the current encoding.
See \code{\link[tm:DirSource]{DirSource}} for details, omitted if \code{format="obj"}.}

\item{pattern}{A regular expression for file matching.
See \code{\link[tm:DirSource]{DirSource}} for details, omitted if \code{format="obj"}.}

\item{recursive}{Logical, indicates whether directories should be read recursively.
See \code{\link[tm:DirSource]{DirSource}} for details, omitted if \code{format="obj"}.}

\item{ignore.case}{Logical, indicates whether \code{pattern} is matched case sensitive.
See \code{\link[tm:DirSource]{DirSource}} for details, omitted if \code{format="obj"}.}

\item{mode}{Character string defining the reading mode.
See \code{\link[tm:DirSource]{DirSource}} for details, omitted if \code{format="obj"}.}

\item{source}{Character string, naming the source of the corpus.}

\item{topic}{Character string, a topic this corpus deals with.}

\item{format}{Either "file" or "obj",
      depending on whether you want to scan files or analyze the text in a given object, like
a character vector. If the latter and \code{\link[koRpus:treetag]{treetag}} is used as the \code{tagger},
texts will be written to temporary files for the process (see \code{dir}).}

\item{mc.cores}{The number of cores to use for parallelization,
      see \code{\link[parallel:mclapply]{mclapply}}.}

\item{...}{Additional options which are passed through to the defined \code{tagger}.}
}
\value{
An object of class \code{\link[tm.plugin.koRpus]{kRp.corpus-class}}.
}
\description{
This function is a combined wrapper that calls \code{\link[tm:DirSource]{DirSource}}
(or \code{\link[tm:VectorSource]{VectorSource}}, if \code{format="obj"}),
\code{\link[tm:VCorpus]{VCorpus}} and \code{\link[koRpus:tokenize]{tokenize}} or
\code{\link[koRpus:treetag]{treetag}}.
}
\details{
The result, if succeeded,
      is a single object of class \code{\link[tm.plugin.koRpus:kRp.corpus-class]{kRp.corpus}},
which includes all read texts in a \code{tm} style \code{VCorpus} format, as well as in
\code{koRpus} style \code{kRp.taggedText} class format.
}
